-- DROP TABLES -- 

DROP TABLE Client;
DROP TABLE Worker;
DROP TABLE Account;
DROP TABLE AccountStatement;
DROP TABLE BankTransaction;
DROP TABLE AccountStatementJoinTranscaction;
 

-- TABLES -- 


create table Client(
    ID_Client NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	firstName VARCHAR(20) NOT NULL,
	secondName VARCHAR(20) NOT NULL,
	nationalID VARCHAR NOT NULL UNIQUE, -- specific value
	clientType VARCHAR(8) NOT NULL,
	email VARCHAR(50) DEFAULT NULL,
	telefonNumber VARCHAR(13) DEFAULT NULL,
	dateOfBirthday TIMESTAMP DEFAULT NULL, -- delete address
	personGivesAccess NUMBER DEFAULT NULL,
);

create table Worker(
	ID_Worker NUMBER GENERATED BY DEFAULT AS IDENTIFIED PRIMARY KEY,
	firstName VARCHAR(20) NOT NULL,
	secondName VARCHAR(20) NOT NULL,
	bankBranch NUMBER NOT NULL, -- specific value
	workTelefonNumber VARCHAR(13) NOT NULL,
	workEMail VARCHAR(50) NOT NULL,
);

CREATE TABLE Account(
	ID_Account NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	dayLimit NUMBER NOT NULL,
	secretNumber NUMBER NOT NULL, -- specific value
	owner NUMBER NOT NULL,
	balance NUMBER NOT NULL,
	currency VARCHAR(3) NOT NULL,
);

CREATE TABLE AccountStatement(
	ID_AccountStatement GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	accountId NUMBER NOT NULL,
	actualDate TIMESTAMP NOT NULL,
	fromDate TIMESTAMP NOT NULL,
	toDate TIMESTAMP NOT NULL,
);

CREATE TABLE BankTransaction(
	ID_Transaction GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	transactionType VARCHAR NOT NULL,
	ammount VARCHAR NOT NULL,
	transactionDate TIMESTAMP NOT NULL,
	fromAccountId NUMBER NOT NULL,
	toAccountId NUMBER NOT NULL,
	toBankId VARCHAR DEFAULT '007', -- default our bank name
	assignClientId NUMBER NOT NULL,
	executeWorkerId NUMBER NOT NULL,
	approvedState BOOLEAN NOT NULL
);


-- Relationships --

CREATE TABLE AccountStatementJoinTranscaction(
	PK_accountStatementId NUMBER NOT NULL,
	PK_transactionId NUMBER NOT NULL,
	CONSTRAINT PK_AccountStatementJoinTransaction PRIMARY KEY (accountStatementId, transactionId),
	CONSTRAINT FK_AccountStateId FOREIGN KEY (accountStatementId) REFERENCES AccountStatement(ID_AccountStatement),
	CONSTRAINT FK_TransactionId FOREIGN KEY (transactionId) REFERENCES Transaction(ID_Transaction)
);


ALTER TABLE Client ADD CONSTRAINT FK_Clinet_personGivesAccess FOREIGN KEY (personGivesAccess) REFERENCES Client(ID_Client);

ALTER TABLE BankTransaction ADD
	CONSTRAINT FK_BankTransaction_assignClientId FOREIGN KEY (assignClientId) REFERENCES Client(ID_Client),
	CONSTRAINT FK_BankTransaction_executeWorkerId FOREIGN KEY (executeWorkerId) REFERENCES Worker(ID_Worker);

ALTER TABLE AccountStatement ADD CONSTRAINT FK_AccountStatement_accountId FOREIGN KEY (clientId) REFERENCES Client(ID_Clinet);

ALTER TABLE AccountOwner ADD CONSTRAINT FK_AccountOwner FOREIGN KEY (owner) REFERENCES Client(ID_Clinet); -- TODO: NEED CHECK THAT CLIENT HAVE 'OWNER' TYPE

-- CHECK --

ALTER TABLE Client ADD 
	CONSTRAINT check_Client_national_id  CHECK (LENGTH(nationalID) = 9),
	CONSTRAINT check_Client_type CHECK clientType = '0wner' OR clientType = 'Extended',
	CONSTRAINT check_Client_mail CHECK 
CONSTRAINT check_Clinet_Types_value CHECK (
	clientType = '0wner' AND (telefonNumber IS NOT NULL AND email IS NOT NULL AND address IS NOT NULL) 
	OR
	clientType = 'Extended' AND (telefonNumber IS NULL AND email IS NULL)
)
